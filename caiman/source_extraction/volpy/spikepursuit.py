#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Apr 19 14:50:09 2019

@author: @caichangjia based on Matlab code provided by Kaspar Podgorski and Amrita Singh
"""
import numpy as np
import matplotlib.pyplot as plt
from skimage.morphology import dilation
from skimage.morphology import disk
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge
from scipy import signal
from scipy import stats    
from scipy.sparse.linalg import svds
import cv2
from caiman.base.movies import movie
import caiman as cm
from scipy.ndimage.filters import gaussian_filter1d

# %%
def volspike(pars):
    """ Main function for finding spikes of one single neuron with given ROI in
        voltage imaging. Using function denoiseSpikes to find spikes
        of one dimensional signal, using ridge regression to find the
        best spatial filters. Do these two steps iteratively to find
        best spike time.

        Args:
            pars: list
                fnames: str
                    name of the memory map file

                fr: int
                    framerate of movie

                cellN: int
                    number of cell processing

                ROIs: 3-d array
                    all region of interests

                weights: 3-d array
                    spatial weights of different cells generated by previous data blocks as initialization

                args: dictionary

                    doCrossVal: boolean
                        whether to use cross validation to optimize regression regularization parameters

                    contextSize: int
                        number of pixels surrounding the ROI to use as context

                    censorSize: int
                        number of pixels surrounding the ROI to censor from the background PCA; roughly
                        the spatial scale of scattered/dendritic neural signals, in pixels

                    nPC_bg: int
                        number of principle components used for background subtraction

                    tau_lp: int
                        time window for lowpass filter (seconds); signals slower than this will be ignored

                    sigmas: 1-d array
                        spatial smoothing radius imposed on spatial filter

                    nIter: int
                        number of iterations alternating between estimating temporal and spatial filters

                    Ridge_bg_coef: float
                        regularization strength for ridge regression in background removal. 
                        
                    flip_signal: boolean
                        whether or not to flip signal upside down to find spikes 
                        for example voltron need to flip the signal
                        
                    threshold: float
                        threshold for spike detection. The real threshold is the
                        value multiply estimated noise level
                        
                    hp_freq: float
                        high-pass cutoff frequency to filter the signal after computing the trace
                        
                    min_spikes: int
                        minimal spikes to be detected

        Returns:
            output: dictionary
                
                rawROI: dictionary
                    including the result after the first spike extraction
                    
                bwexp: 2-d array
                    expansion area of ROI, used for reconstructing signal
                    
                meanIM: 1-d array
                    trace after high-pass filter
                    
                trace_raw: 1-d array
                    raw trace (spatial filter dot product movie)
                    
                trace_processed: 1-d array
                    processed signal of the video

                trace_recons: 1-d array
                    reconstructed signal of the neuron
                
                trace_sub: 1-d array
                    subthreshold signal of the neuron
                    
                spikes: 1-d array
                    spike time of the neuron

                num_spikes: list
                    number of spikes in each iteration
                         
                snr: float
                    signal to noise ratio of the processed signal

                spatialFilter: 2-d array
                    spatial filter of the neuron

                locality: boolean
                    False if the maximum of spatial filter is not in the initial ROI
                    
                no_spike: boolean
                    whether there are zero spikes in the signal

                cellN: int
                    index of cell            
                
                ROIbw: 2-d array
                    region of interest
                    
                falsePosRate: float
                    possibility of misclassify noise as real spikes

                detectionRate: float
                    possibility of real spikes being detected
                    
                template: 1-d array
                    spike template of the neuron
                                    
                thresh: float
                    threshold of the signal
                    
                F0: 1-d array
                    initial signal 
                    
                dFF: 1-d array
                    scaled signal
                
                bg_pc: 2-d array
                    background principal components extracted from svd
                    
                weights: 2-d array
                    ridge regression coefficient for updating spatial filter
                                        
                
    """
    fnames = pars[0]
    sampleRate = pars[1]
    cellN = pars[2]
    bw = pars[3]    
    weights_init = pars[4]    
    args = pars[5]
    
    print('Now processing cell number {0}'.format(cellN))
    
    doCrossVal = args['doCrossVal']
    contextSize = args['contextSize']
    censorSize = args['censorSize']
    nPC_bg = args['nPC_bg']
    tau_lp = args['tau_lp']
    sigmas = args['sigmas']
    nIter = args['nIter']
    Ridge_bg_coef = args['Ridge_bg_coef']
    flip_signal = args['flip_signal']
    threshold = args['threshold']
    weight_update = args['weight_update']
    hp_freq = args['hp_freq']
    min_spikes = args['min_spikes']
    sub_freq = args['sub_freq']
    windowLength = sampleRate * 0.02 # window length for spike templates
    output = {}
    output['rawROI'] = {}

    Yr, dims, T = cm.load_memmap(fnames)
    if bw.shape == dims:
        images = np.reshape(Yr.T, [T] + list(dims), order='F')
    elif bw.shape == dims[::-1]:
        images = np.reshape(Yr.T, [T] + list(dims), order='F').transpose([0, 2, 1])
    else:
        print('size of ROI and video does not accrod')

    # extract relevant region and align
    bwexp = dilation(bw, np.ones([contextSize, contextSize]), shift_x=True, shift_y=True)
    Xinds = np.where(np.any(bwexp > 0, axis=1) > 0)[0]
    Yinds = np.where(np.any(bwexp > 0, axis=0) > 0)[0]
    bw = bw[Xinds[0]:Xinds[-1] + 1, Yinds[0]:Yinds[-1] + 1]
    notbw = 1 - dilation(bw, disk(censorSize))
    data = np.array(images[:, Xinds[0]:Xinds[-1] + 1, Yinds[0]:Yinds[-1] + 1])
    bw = (bw > 0)
    notbw = (notbw > 0)
    ref = np.median(data[:500, :, :], axis=0)
    bwexp[Xinds[0]:Xinds[-1] + 1, Yinds[0]:Yinds[-1] + 1] = True
    output['bwexp'] = bwexp

    # visualize ROI
    """
    fig = plt.figure()
    plt.subplot(131);plt.imshow(ref);plt.axis('image');plt.xlabel('mean Intensity')
    plt.subplot(132);plt.imshow(bw);plt.axis('image');plt.xlabel('initial ROI')
    plt.subplot(133);plt.imshow(notbw);plt.axis('image');plt.xlabel('background')
    fig.suptitle('ROI selection')
    plt.show()
    """

    if flip_signal==True:
        data = -data
    else:
        pass

    output['meanIM'] = np.mean(data, axis=0)
    data = np.reshape(data, (data.shape[0], -1))
    data = data - np.mean(data, 0)
    data = data - np.mean(data, 0)

    # remove photobleaching effect by high pass filtering signal
    data_hp = signal_filter(data.T, 1 / tau_lp, sampleRate).T  
    data_lp = data - data_hp

    #plt.figure(); plt.plot(data_lp.mean(1))
    
    # initial trace
    if weights_init is None:
        t = np.nanmean(data_hp[:, bw.ravel()], 1)
    else:
        t = np.matmul(data_hp, weights_init[1:])    # weights are negative 
    t = t - np.mean(t)

    # remove any variance in trace that can be predicted from the background principal components
    Ub, Sb, Vb = svds(data_hp[:, notbw.ravel()], nPC_bg)
    alpha = nPC_bg * Ridge_bg_coef 
    reg = Ridge(alpha=alpha, fit_intercept=False, solver='lsqr').fit(Ub, t)
    t = np.double(t - np.matmul(Ub, reg.coef_))
    
    # find out spikes of initial trace
    Xspikes, Xraw, spikeTimes, guessData, output['rawROI']['templates'], low_spikes, thresh, lp = denoiseSpikes(t, 
                                          windowLength, sampleRate, do_plot=False, last_round=False, hp_freq=hp_freq, 
                                          threshold=threshold, min_spikes=min_spikes)

    Xspikes = Xspikes
    output['rawROI']['X'] = t.copy()
    output['rawROI']['Xspikes'] = Xspikes.copy()
    output['rawROI']['spikeTimes'] = spikeTimes.copy()
    output['rawROI']['spatialFilter'] = bw.copy()
    output['rawROI']['X'] = output['rawROI']['X'] * np.mean(t[output['rawROI']['spikeTimes']]) / np.mean(
        output['rawROI']['X'][output['rawROI']['spikeTimes']])  # correct shrinkage
    num_spikes = [spikeTimes.shape[0]]
    templates = output['rawROI']['templates']

    # prebuild the regression matrix generate a predictor for ridge regression
    pred = np.empty_like(data_hp)
    pred[:] = data_hp
    pred = np.hstack((np.ones((data_hp.shape[0], 1), dtype=np.single), np.reshape
    (movie.gaussian_blur_2D(np.reshape(pred,
                                       (data_hp.shape[0], ref.shape[0], ref.shape[1])),
                            kernel_size_x=7, kernel_size_y=7, kernel_std_x=1.5,
                            kernel_std_y=1.5, borderType=cv2.BORDER_REPLICATE), data_hp.shape)))

    # Cross-validation of regularized regression parameters
    lambdamax = np.single(np.linalg.norm(pred[:, 1:], ord='fro') ** 2)
    lambdas = lambdamax * np.logspace(-4, -2, 3)
    I0 = np.eye(pred.shape[1], dtype=np.single)
    I0[0, 0] = 0
    
    if doCrossVal:
        # need to add
        print('doing cross validation')
    else:
        s_max = 1
        l_max = 2
        sigma = sigmas[s_max]
    
    recon = np.empty_like(data_hp)
    recon[:] = data_hp
    recon = np.hstack((np.ones((data_hp.shape[0], 1), dtype=np.single), np.reshape
    (movie.gaussian_blur_2D(np.reshape(recon,
                                       (data_hp.shape[0], ref.shape[0], ref.shape[1])),
                            kernel_size_x=np.int(2 * np.ceil(2 * sigma) + 1),
                            kernel_size_y=np.int(2 * np.ceil(2 * sigma) + 1),
                            kernel_std_x=sigma, kernel_std_y=sigma,
                            borderType=cv2.BORDER_REPLICATE), data_hp.shape)))

    # Identify spatial filters with regularized regression
    #flag=0
    #for j in range(3 if args['weight_update'] == 'NMF' else 1):
        #if j==0:
        #    initialGuess = guessData[:]
        #else:
        #    guessData = initialGuess[:]
    last_round = False
    for iteration in range(nIter):
        do_plot = False
        if iteration == nIter - 1:
            do_plot = False
            last_round = True
            
        gD = np.single(guessData.copy())
        if weight_update == 'NMF':
            C = np.array([gD, np.ones_like(gD)])  # constant baselines as 2nd component
            CCt = C.dot(C.T)
            CY = C.dot(recon[:, 1:])
            A = np.minimum(np.linalg.inv(CCt).dot(CY), 0)
            for _ in range(5):
                for m in range(2):
                    A[m] += (CY[m] - CCt[m].dot(A)) / CCt[m, m]
                    if m == 0:
                        A[m] = np.minimum(A[m], 0)
            weights = np.concatenate([[0], A[0]])
        
        elif weight_update == 'RidgeRegression':
            Ri = Ridge(alpha=lambdas[l_max], fit_intercept=True, solver='lsqr')
            Ri.fit(recon, gD)
            weights = Ri.coef_
            weights[0] = Ri.intercept_

        # Compute spatial filter
        spatialFilter = np.empty_like(weights)
        spatialFilter[:] = weights
        spatialFilter = movie.gaussian_blur_2D(np.reshape(spatialFilter[1:],
                                                          ref.shape, order='C')[np.newaxis, :, :],
                                               kernel_size_x=np.int(2 * np.ceil(2 * sigma) + 1),
                                               kernel_size_y=np.int(2 * np.ceil(2 * sigma) + 1),
                                               kernel_std_x=sigma, kernel_std_y=sigma,
                                               borderType=cv2.BORDER_REPLICATE)[0]

        # Compute new signal            
        X = np.matmul(recon, weights)
        X = X - np.mean(X)

        # Ridge Regression to remove background components
        b = Ridge(alpha=alpha, fit_intercept=False, solver='lsqr').fit(Ub, X).coef_
        X = X - np.matmul(Ub, b)
   
        # correct shrinkage
        X = np.double(X * np.mean(t[spikeTimes]) / np.mean(X[spikeTimes]))

        # generate the new trace and the new denoised trace
        Xspikes, Xraw, spikeTimes, guessData, templates, low_spikes, thresh, _ = denoiseSpikes(X, 
                    windowLength, sampleRate, do_plot=do_plot, last_round=last_round, hp_freq=hp_freq, 
                    threshold=threshold, min_spikes=min_spikes)
    
        num_spikes.append(spikeTimes.shape[0])

    # compute SNR
    if len(spikeTimes)>0:
        selectSpikes = np.zeros(Xraw.shape)
        selectSpikes[spikeTimes] = 1
        sgn = np.mean(Xraw[selectSpikes > 0])
        #noise = np.std(Xraw[selectSpikes == 0])
        ff1 = -Xraw * (Xraw < 0)
        Ns = np.sum(ff1 > 0)
        noise = np.sqrt(np.divide(np.sum(ff1**2), Ns)) 
        snr = sgn / noise
    else:
        snr = 0

    # If pass locality test, then update spatial filter         
    matrix = np.matmul(np.transpose(pred[:, 1:]), guessData)
    sigmax = np.sqrt(np.sum(np.multiply(pred[:, 1:], pred[:, 1:]), axis=0))
    sigmay = np.sqrt(np.dot(guessData, guessData))
    IMcorr = matrix / sigmax / sigmay
    maxCorrInROI = np.max(IMcorr[bw.ravel()])
    
    if np.any(IMcorr[notbw.ravel()] > maxCorrInROI):
        locality = False
    else:
        locality = True
    
    # Spatial filter in FOV
    spatial = np.zeros(images.shape[1:])
    spatial[Xinds[0]:Xinds[-1] + 1, Yinds[0]:Yinds[-1] + 1] = spatialFilter

    # Subthreshold activity extraction    
    data_sub = Xraw.copy() - guessData
    data_sub = signal_filter(data_sub, sub_freq, sampleRate, order=5, mode='low') 

    del pred
    del recon
    
    # output
    output['trace_raw'] = Xraw
    output['trace_processed'] = Xspikes
    output['trace_recons'] = guessData        
    output['trace_sub'] = data_sub
    output['spikes'] = spikeTimes
    output['num_spikes'] = num_spikes
    output['snr'] = snr
    output['spatialFilter'] = spatial    
    output['locality'] = locality    
    output['low_spikes'] = low_spikes
    output['trace_lp'] = lp
    output['ROI'] = np.transpose(np.vstack((Xinds[[0, -1]], Yinds[[0, -1]])))
    output['ROIbw'] = bw
    output['templates'] = templates
    output['thresh'] = thresh
    #output['F0'] = np.nanmean(data_lp[:, bw.flatten()] + output['meanIM'][bw][np.newaxis, :], 1)
    #output['dFF'] = X / output['F0']
    #output['rawROI']['dFF'] = output['rawROI']['X'] / output['F0']
    output['bg_pc'] = Ub  # background components    
    output['weights'] = weights
    output['cellN'] = cellN

    return output


def denoiseSpikes(data, windowLength, sampleRate=400, do_plot=True, last_round=False, hp_freq=1, threshold=3.5, min_spikes=5):
    """ Function for finding spikes and the temporal filter given one dimensional signals.
        Use function whitenedMatchedFilter to denoise spikes. Function getThresh
        helps to find the best threshold given height of spikes.

    Args:
        data: 1-D array
            one dimensional signal

        windowLength: int
            length of window size for temporal filter

        sampleRate: int, default 400
            number of samples per second in the video

        do_plot: boolean, default:True
            if Ture, will plot trace of signals and spiketimes, peak triggered
            average, histogram of heights,

        doClip: int, default:150
            maximum number of spikes accepted

    Returns:
        datafilt: 1-D array
            signals after whitened matched filter

        spikeTimes: 1-D array
            record of time of spikes

        guessData: 1-D array
            recovery of original signals

        falsePosRate: float
            possibility of misclassify noise as real spikes

        detectionRate: float
            possibility of real spikes being detected

        templates: 1-D array
            temporal filter which is the peak triggered average

        low_spk: boolean
            true if number of spikes is smaller than 30
    """
    # high-pass filtered the signal to remove part of subthreshold activity
    data = data - np.median(data)
    data_hp = signal_filter(data, hp_freq, sampleRate, order=5)
    #data_hp = np.array(cm.movie(data_hp[:, np.newaxis, np.newaxis], fr=sampleRate).computeDFF(secsWindow=0.02)[0])[:,0,0]
    data_lp = data - data_hp
    data_hp = gaussian_filter1d(data_hp, sampleRate/500)          #sampleRate/500
        
    low_spikes = False
    #md = mode_robust(data_hp, axis=None)
    data_hp = data_hp - np.median(data_hp)
    pks = data_hp[signal.find_peaks(data_hp, height=None, distance=int(sampleRate/100))[0]]

    # estimate noise    
    ff1 = -data_hp * (data_hp < 0)
    Ns = np.sum(ff1 > 0)
    #std = np.std(data_hp[data_hp < -np.min(data_hp)]) 
    std = np.sqrt(np.divide(np.sum(ff1**2), Ns)) 
    thresh = 3.5 * std
    locs = signal.find_peaks(data_hp, height=thresh, distance=int(sampleRate/100))[0]
    if len(locs) < min_spikes:
        print('first round spike extraction: less than {} spikes are found, pick top {} spikes'.format(min_spikes, min_spikes))
        thresh = np.percentile(pks, 100 * (1 - min_spikes / len(pks)))
        locs = signal.find_peaks(data_hp, height=thresh, distance=int(sampleRate/100))[0]

    # peak-traiggered average
    window = np.int64(np.arange(-windowLength, windowLength + 1, 1))
    locs = locs[np.logical_and(locs > (-window[0]), locs < (len(data_hp) - window[-1]))]
    PTD = data_hp[(locs[:, np.newaxis] + window)]
    PTA = np.mean(PTD, 0)
    templates = PTA

    # matched filter
    whitened_filter = True
    if whitened_filter == True:
        datafilt = whitenedMatchedFilter(data_hp, locs, window)     # Note in this step we use convolution(or template matching) to make spikes more prominent
    else:
        datafilt = np.convolve(data_hp, np.flipud(PTA), 'same')
    #md = mode_robust(datafilt, axis=None)
    datafilt = datafilt - np.median(datafilt)

    # spikes detected after filter
    pks2 = datafilt[signal.find_peaks(datafilt, height=None, distance=int(sampleRate/100))[0]]
    ff1 = -datafilt * (datafilt < 0)
    Ns = np.sum(ff1 > 0)
    std2 = np.sqrt(np.divide(np.sum(ff1**2), Ns)) 
    #std2 = np.std(datafilt[datafilt < -np.min(datafilt)])    
    thresh2 = threshold * std2
    spikeTimes = signal.find_peaks(datafilt, height=thresh2, distance=int(sampleRate/100))[0]
    
    if len(spikeTimes) < min_spikes:
        if last_round == True:
            print('final round extraction: less than {} spikes are found'.format(min_spikes))
            low_spikes = True
        else:
            print('second round spike extraction: less than {} spikes are found, pick top {} spikes'.format(min_spikes, min_spikes))
            thresh2 = np.percentile(pks2, 100 * (1 - min_spikes / len(pks2)))
            spikeTimes = signal.find_peaks(datafilt, height=thresh2, distance=int(sampleRate/100))[0]
    if len(spikeTimes) > 0:
        guessData = np.zeros(data_hp.shape)
        guessData[spikeTimes] = 1
        guessData = np.convolve(guessData, PTA, 'same')    
        # filtering shrinks the data;
        # rescale so that the mean value at the peaks is same as in the input
        datafilt = datafilt * np.mean(data_hp[spikeTimes]) / np.mean(datafilt[spikeTimes])
        thresh2 = thresh2 * np.mean(data_hp[spikeTimes]) / np.mean(datafilt[spikeTimes])
    else:
        guessData = np.zeros(data_hp.shape)

    if do_plot:
        plt.figure()
        plt.subplot(211)
        plt.hist(pks, 500)
        plt.axvline(x=thresh, c='r')
        plt.title('raw data')
        plt.subplot(212)
        plt.hist(pks2, 500)
        plt.axvline(x=thresh2, c='r')
        plt.title('after matched filter')
        plt.tight_layout()
        plt.show()

        plt.figure()
        plt.plot(np.transpose(PTD), c=[0.5, 0.5, 0.5])
        plt.plot(PTA, c='black', linewidth=2)
        plt.title('Peak-triggered average')
        plt.show()

        plt.figure()
        plt.subplot(211)
        plt.plot(data_hp)
        plt.plot(locs, np.max(datafilt) * 1.1 * np.ones(locs.shape), color='r', marker='o', fillstyle='none',
                 linestyle='none')
        plt.plot(spikeTimes, np.max(datafilt) * 1 * np.ones(spikeTimes.shape), color='g', marker='o', fillstyle='none',
                 linestyle='none')
        plt.subplot(212)
        plt.plot(datafilt)
        plt.plot(locs, np.max(datafilt) * 1.1 * np.ones(locs.shape), color='r', marker='o', fillstyle='none',
                 linestyle='none')
        plt.plot(spikeTimes, np.max(datafilt) * 1 * np.ones(spikeTimes.shape), color='g', marker='o', fillstyle='none',
                 linestyle='none')
        plt.show()
        
        plt.figure()
        plt.plot(data.flatten())
        plt.plot(data_lp)

    return datafilt, data, spikeTimes, guessData, templates, low_spikes, thresh2, data_lp

def getThresh(pks, doClip, pnorm=0.5):
    """ Function for deciding threshold given heights of all peaks.

    Args:
        pks: 1-D array
            height of all peaks

        doClip: int

        pnorm: float, between 0 and 1, default is 0.5
            a variable deciding the amount of spikes chosen

    Returns:
        thresh: float
            threshold for choosing spikes

        falsePosRate: float
            possibility of misclassify noise as real spikes

        detectionRate: float
            possibility of real spikes being detected

        low_spk: boolean
            true if number of spikes is smaller than 30
    """
    # find median of the kernel density estimation of peak heights
    spread = np.array([pks.min(), pks.max()])
    spread = spread + np.diff(spread) * np.array([-0.05, 0.05])
    low_spk = False
    pts = np.linspace(spread[0], spread[1], 2001)
    kde = stats.gaussian_kde(pks)
    f = kde(pts)    
    xi = pts
    center = np.where(xi > np.median(pks))[0][0]

    fmodel = np.concatenate([f[0:center + 1], np.flipud(f[0:center])])
    if len(fmodel) < len(f):
        fmodel = np.append(fmodel, np.ones(len(f) - len(fmodel)) * min(fmodel))
    else:
        fmodel = fmodel[0:len(f)]

    # adjust the model so it doesn't exceed the data:
    csf = np.cumsum(f) / np.sum(f)
    csmodel = np.cumsum(fmodel) / np.max([np.sum(f), np.sum(fmodel)])
    lastpt = np.where(np.logical_and(csf[0:-1] > csmodel[0:-1] + np.spacing(1), csf[1:] < csmodel[1:]))[0]
    if not lastpt.size:
        lastpt = center
    else:
        lastpt = lastpt[0]
    fmodel[0:lastpt + 1] = f[0:lastpt + 1]
    fmodel[lastpt:] = np.minimum(fmodel[lastpt:], f[lastpt:])

    # find threshold
    csf = np.cumsum(f)
    csmodel = np.cumsum(fmodel)
    csf2 = csf[-1] - csf
    csmodel2 = csmodel[-1] - csmodel
    obj = csf2 ** pnorm - csmodel2 ** pnorm
    maxind = np.argmax(obj)
    thresh = xi[maxind]

    if np.sum(pks > thresh) < 5:
        low_spk = True
        print(
            'Very few spikes were detected at the desired sensitivity/specificity tradeoff. Adjusting threshold to take 30 largest spikes')
        thresh = np.percentile(pks, 100 * (1 - 5 / len(pks)))
    elif ((np.sum(pks > thresh) > doClip) & (doClip > 0)):
        print('Selecting top', doClip, 'spikes for template')
        thresh = np.percentile(pks, 100 * (1 - doClip / len(pks)))

    ix = np.argmin(np.abs(xi - thresh))
    falsePosRate = csmodel2[ix] / csf2[ix]
    detectionRate = (csf2[ix] - csmodel2[ix]) / np.max(csf2 - csmodel2)
    return thresh, falsePosRate, detectionRate, low_spk


def whitenedMatchedFilter(data, locs, window):
    """
    Function for using whitened matched filter to the original signal for better
    SNR. Use welch method to approximate the spectral density of the signal.
    Rescale the signal in frequency domain. After scaling, convolve the signal with
    peak-triggered-average to make spikes more prominent.
    """
    N = np.ceil(np.log2(len(data)))
    censor = np.zeros(len(data))
    censor[locs] = 1
    censor = np.int16(np.convolve(censor.flatten(), np.ones([1, len(window)]).flatten(), 'same'))
    censor = (censor < 0.5)
    noise = data[censor]

    _, pxx = signal.welch(noise, fs=2 * np.pi, window=signal.get_window('hamming', 1000), nfft=2 ** N, detrend=False,
                          nperseg=1000)
    Nf2 = np.concatenate([pxx, np.flipud(pxx[1:-1])])
    scaling_vector = 1 / np.sqrt(Nf2)

    cc = np.pad(data.copy(),(0,np.int(2**N-len(data))),'constant')    
    dd = (cv2.dft(cc,flags=cv2.DFT_SCALE+cv2.DFT_COMPLEX_OUTPUT)[:,0,:]*scaling_vector[:,np.newaxis])[:,np.newaxis,:]
    dataScaled = cv2.idft(dd)[:,0,0]
    PTDscaled = dataScaled[(locs[:, np.newaxis] + window)]
    PTAscaled = np.mean(PTDscaled, 0)
    datafilt = np.convolve(dataScaled, np.flipud(PTAscaled), 'same')
    datafilt = datafilt[:len(data)]
    return datafilt


def signal_filter(sg, freq, sampleRate, order=3, mode='high'):
    """
    Function for passing signals with frequency higher than freq
    """
    normFreq = freq / (sampleRate / 2)
    b, a = signal.butter(order, normFreq, mode)
    sg = np.single(signal.filtfilt(b, a, sg, padtype='odd', padlen=3 * (max(len(b), len(a)) - 1)))
    return sg